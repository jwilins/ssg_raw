/*                                                                           */
/*   Score.cpp   スコア入出力関数                                            */
/*                                                                           */
/*                                                                           */

#include "LZ_UTY.H"
#include "LEVEL.H"
#include "SCORE.H"
#include <windows.h>

using NR_SCORE_LIST = std::span<NR_NAME_DATA, NR_RANK_MAX>;

//#define PBG_MASK_VALUE		((DWORDLONG)0x342d3a4de92c68ba)
//#define PBG_MASK_VALUE		((DWORDLONG)0xe92cd3a4d8ba6342)
#define PBG_MASK_VALUE		((DWORDLONG)0xb97eb2c6542d3a41)



const auto ScoreFileName = _PATH("秋霜SC.DAT");				// スコアデータ格納ファイル名
NR_SCORE_STRING		ScoreString[NR_RANK_MAX];	// スコアデータ文字列格納先

// スコアデータ格納先(名前空間で保護)
static std::unique_ptr<NR_SCORE_DATA> ScoreData = nullptr;

static BOOL LoadScoreData(void);			// スコアデータを読み込む
static void ReleaseScoreData(void);	// スコアデータを解放する
static std::optional<NR_SCORE_LIST> GetNList(uint8_t Dif);	// 難易度でポインタを振り分ける
static BOOL SetDefaultScoreData(void);		// スコアデータ初期値をセット

static BOOL _LoadSC(NR_NAME_DATA *NData, BIT_DEVICE_READ &bd);
static BOOL _SaveSC(NR_NAME_DATA *NData, BIT_DEVICE_WRITE &bd);

static BYTE      _xGet8( BIT_DEVICE_READ &bd, DWORDLONG *ExMask);
static DWORD     _xGet32(BIT_DEVICE_READ &bd, DWORDLONG *ExMask);
static DWORDLONG _xGet64(BIT_DEVICE_READ &bd, DWORDLONG *ExMask);

static void _xPut8( BIT_DEVICE_WRITE &bd, BYTE  data,    DWORDLONG *ExMask);
static void _xPut32(BIT_DEVICE_WRITE &bd, DWORD data,    DWORDLONG *ExMask);
static void _xPut64(BIT_DEVICE_WRITE &bd, DWORDLONG data,DWORDLONG *ExMask);




// 現在のスコア列を取得する(名前挿入アリ) //
// NData == NULL の場合、挿入しません     //
int SetScoreString(NR_NAME_DATA *NData, BYTE Dif)
{
//	static char			*WTable[4] = {"WIDE ","HOMING","LASER","?????"};
	NR_SCORE_STRING		*Res;
	int					i,num,rank;
	__int64				temp;

	Res = ScoreString;


	// スコアデータを読み込む //
	if(NData != NULL){
		rank = IsHighScore(NData, Dif);
		if(rank==0) return 0;
	}
	else{
		rank = NR_RANK_MAX;
	}

	// ポインタをセットするぞ //
	if(!LoadScoreData()) return 0;
	auto maybe_p = GetNList(Dif);
	if(!maybe_p) {
		ReleaseScoreData();
		return 0;
	}
	auto p = maybe_p.value();

	if(rank!=0 && NData!=NULL){
		// まずは、スコアを下方向に押し出すのだ //
		for(i=NR_RANK_MAX-1; i>=rank; i--){
			p[i] = p[i-1];		// 構造体から構造体への代入
		}

		// 新しいデータを挿入だ //
		p[rank-1] = *NData;
	}

	// データの格納開始 //
	temp = num = 0;
	for(i=0; i<NR_RANK_MAX; i++){
		if(temp < p[i].Score){
			temp  = p[i].Score;
			num += 1;
		}

		Res[i].Rank = num;
		Res[i].x    = (640 + (50  + i*24*20)) << 6;
		Res[i].y    = (100 + i*48) << 6;
		Res[i].bMoveEnable = TRUE;

		strcpy(Res[i].Name  , p[i].Name);

		//strcpy(Res[i].Weapon, WTable[p[i].Weapon % 4]);
		Res[i].Weapon = p[i].Weapon % 4;

		sprintf(Res[i].Score,"%11I64d",p[i].Score);
		sprintf(Res[i].Evade, "%6u", p[i].Evade);
		sprintf(Res[i].Stage,"%1d" ,p[i].Stage);
	}

	ReleaseScoreData();

	return rank;
}


// ０：ハイスコアでない  それ以外：順位 //
int IsHighScore(NR_NAME_DATA *NData, BYTE Dif)
{
	int				Rank;

	// ロードできないので失敗！ //
	if(!LoadScoreData()) return 0;

	// 難易度でポインタを振り分ける //
	const auto maybe_temp = GetNList(Dif);
	if(!maybe_temp) {
		ReleaseScoreData();
		return 0;
	}
	const auto temp = maybe_temp.value();

	// 該当個所はあるかな？ //
	for(Rank=0; Rank<NR_RANK_MAX ; Rank++){
		// スコアが等しい場合は、後から入ったほうが下の順位に //
		// なるようにするのだ（前作[秋霜玉(仮] と同じね）     //
		if(NData->Score > temp[Rank].Score) break;
	}
	if(Rank == NR_RANK_MAX) Rank = -1;

	// 解放を行う //
	ReleaseScoreData();

	// 順位を返す //
	return Rank+1;
}


// スコアデータを書き出す //
bool SaveScoreData(NR_NAME_DATA *NData, BYTE Dif)
{
	int				Rank;

	// スコアデータを読み込む //
	Rank = IsHighScore(NData, Dif);

	// これは、ハイスコアじゃないね //
	if(Rank == 0) return FALSE;

	// ポインタをセットする //
	if(!LoadScoreData()) return FALSE;
	auto maybe_temp = GetNList(Dif);
	if(!maybe_temp) {
		ReleaseScoreData();
		return FALSE;
	}
	auto temp = maybe_temp.value();

	// まずは、スコアを下方向に押し出す //
	for(auto i = (temp.size() - 1); i >= Rank; i--) {
		temp[i] = temp[i-1];		// 構造体から構造体への代入
	}

	// 新しいデータを挿入だ //
	temp[Rank-1] = *NData;

	// 実際にファイルに出力 //
	BIT_DEVICE_WRITE bd;
	_SaveSC(ScoreData->Easy,    bd);
	_SaveSC(ScoreData->Normal,  bd);
	_SaveSC(ScoreData->Hard,    bd);
	_SaveSC(ScoreData->Lunatic, bd);
	_SaveSC(ScoreData->Extra,   bd);
	ReleaseScoreData();

	return bd.Write(ScoreFileName);
}


// スコアデータを読み込む //
static BOOL LoadScoreData(void)
{
	BOOL			bInit = FALSE;

	// すでにロード済みの場合(これは失敗にしない) //
	if(ScoreData) return TRUE;

	ScoreData = std::unique_ptr<NR_SCORE_DATA>(
		new (std::nothrow) NR_SCORE_DATA
	);
	if(ScoreData == nullptr) {
		return false;
	}

	// ビット読み込みモードでファイルを開く //
	auto bd = BitFilCreateR(ScoreFileName);
	while(1){
		if(!_LoadSC(ScoreData->Easy,    bd)) break;
		if(!_LoadSC(ScoreData->Normal,  bd)) break;
		if(!_LoadSC(ScoreData->Hard,    bd)) break;
		if(!_LoadSC(ScoreData->Lunatic, bd)) break;
		if(!_LoadSC(ScoreData->Extra,   bd)) break;

		bInit = TRUE;
		break;
	}

	if(!bInit){
		// ファイルが存在しないか不正な場合、新たに作成する //
		// この時点では、ファイルに対して書き込みは行わない //
		return SetDefaultScoreData();
	}

	return TRUE;
}


static void ReleaseScoreData(void)
{
	// 解放～ //
	ScoreData = nullptr;
}


// 難易度でポインタを振り分ける //
static std::optional<NR_SCORE_LIST> GetNList(uint8_t Dif)
{
	if(!ScoreData) {
		return {};
	}

	switch(Dif){
		case(GAME_EASY):	return ScoreData->Easy;
		case(GAME_NORMAL):	return ScoreData->Normal;
		case(GAME_HARD):	return ScoreData->Hard;
		case(GAME_LUNATIC):	return ScoreData->Lunatic;
		case(GAME_EXTRA):	return ScoreData->Extra;
		default:
			return {};
	}
}

// スコアデータ初期値をセット //
static BOOL SetDefaultScoreData(void)
{
	if(NULL == ScoreData) return FALSE;

	for(auto i = 0; i < (GAME_EXTRA + 1); i++) {
		auto maybe_temp = GetNList(i);
		if(!maybe_temp) {
			return false;
		}
		auto temp = maybe_temp.value();
		for(size_t j = 0; j < temp.size(); j++) {
			strcpy(temp[j].Name, "????????");
			temp[j].Score  = ((temp.size() - j) * 1200000); // 1500000;
			temp[j].Evade  = ((temp.size() - j) * 50);
			temp[j].Stage  = ((i < 4) ? (temp.size() - j) : 1);
			temp[j].Weapon = j % 3;
		}
	}

	return TRUE;
}

static BOOL _LoadSC(NR_NAME_DATA *NData, BIT_DEVICE_READ &bd)
{
	int			i,j;
	DWORDLONG	CheckSum = 0;
	DWORDLONG	Mask     = PBG_MASK_VALUE;
	BYTE		flag     = 0;

	for(i=0; i<NR_RANK_MAX; i++){
		CheckSum = 0;
		if(flag != bd.GetBit()) return FALSE;
		else                    flag = 1-flag;

		// 名前を獲得する //
		for(j=0; j<NR_NAME_LEN; j++){
			NData[i].Name[j] = _xGet8(bd, &Mask);
			CheckSum += NData[i].Name[j];
		}
		if(flag != bd.GetBit()) return FALSE;
		else                    flag = 1-flag;

		// 得点を獲得する //
		NData[i].Score = _xGet64(bd, &Mask);
		CheckSum += NData[i].Score;
		if(flag != bd.GetBit()) return FALSE;
		else                    flag = 1-flag;

		// かすりを獲得する //
		NData[i].Evade = _xGet32(bd, &Mask);
		CheckSum += NData[i].Evade;
		if(flag != bd.GetBit()) return FALSE;
		else                    flag = 1-flag;

		// ステージを獲得する //
		NData[i].Stage = _xGet8(bd, &Mask);
		CheckSum += NData[i].Stage;
		if(flag != bd.GetBit()) return FALSE;
		else                    flag = 1-flag;

		// ウエポンを獲得する //
		NData[i].Weapon = _xGet8(bd, &Mask);
		CheckSum += NData[i].Weapon;
		if(flag != bd.GetBit()) return FALSE;
		else                    flag = 1-flag;

		// チェックサム比較 //
		if(CheckSum != _xGet64(bd, &Mask)) return FALSE;
	}

	return TRUE;
}

static BOOL _SaveSC(NR_NAME_DATA *NData, BIT_DEVICE_WRITE &bd)
{
	int			i,j;
	DWORDLONG	CheckSum = 0;
	DWORDLONG	Mask     = PBG_MASK_VALUE;
	BYTE		flag     = 0;

	for(i=0; i<NR_RANK_MAX; i++){
		CheckSum = 0;
		bd.PutBit(flag); flag = 1-flag;	// ビット挿入

		// 名前を出力する //
		for(j=0; j<NR_NAME_LEN; j++){
			CheckSum += NData[i].Name[j];
			_xPut8(bd, NData[i].Name[j], &Mask);
		}
		bd.PutBit(flag); flag = 1-flag;	// ビット挿入

		// 得点を出力する //
		CheckSum += NData[i].Score;
		_xPut64(bd, NData[i].Score, &Mask);
		bd.PutBit(flag); flag = 1-flag;	// ビット挿入

		// かすりを出力する //
		CheckSum += NData[i].Evade;
		_xPut32(bd, NData[i].Evade, &Mask);
		bd.PutBit(flag); flag = 1-flag;	// ビット挿入

		// ステージを出力する //
		CheckSum += NData[i].Stage;
		_xPut8(bd, NData[i].Stage, &Mask);
		bd.PutBit(flag); flag = 1-flag;	// ビット挿入

		// ウエポンを出力する //
		CheckSum += NData[i].Weapon;
		_xPut8(bd, NData[i].Weapon, &Mask);
		bd.PutBit(flag); flag = 1-flag;	// ビット挿入

		// チェックサムを出力する //
		_xPut64(bd, CheckSum, &Mask);
	}

	return TRUE;
}


typedef union tagWORD64{
	DWORDLONG		data64;
	struct{
		WORD	d1;
		WORD	d2;
		WORD	d3;
		WORD	d4;
	};
} WORD64;

typedef union tagWORD32{
	DWORD		data32;
	struct{
		WORD	d1;
		WORD	d2;
	};
} WORD32;

static void _xPut8( BIT_DEVICE_WRITE &bd, BYTE data, DWORDLONG *ExMask)
{
	*ExMask = (((*ExMask)&0x800000000000000)>>60)+((*ExMask)<<1);

	data += (BYTE)(*ExMask);

	bd.PutBits((DWORD)data, 8);
}

static BYTE _xGet8( BIT_DEVICE_READ &bd, DWORDLONG *ExMask)
{
	*ExMask = (((*ExMask)&0x800000000000000)>>60)+((*ExMask)<<1);

	return (BYTE)bd.GetBits(8) - (BYTE)(*ExMask);
}

static void _xPut32(BIT_DEVICE_WRITE &bd, DWORD data, DWORDLONG *ExMask)
{
	WORD32		temp;

	*ExMask = (((*ExMask)&0x800000000000000)>>60)+((*ExMask)<<1);

	temp.data32 = data + (DWORD)(*ExMask);

	bd.PutBits((DWORD)temp.d1, 16);
	bd.PutBits((DWORD)temp.d2, 16);
}

static DWORD _xGet32(BIT_DEVICE_READ &bd, DWORDLONG *ExMask)
{
	WORD32		temp;

	*ExMask = (((*ExMask)&0x800000000000000)>>60)+((*ExMask)<<1);

	temp.d1 = (WORD)bd.GetBits(16);
	temp.d2 = (WORD)bd.GetBits(16);

	return temp.data32 - (DWORD)(*ExMask);
}

static void _xPut64(BIT_DEVICE_WRITE &bd, DWORDLONG data, DWORDLONG *ExMask)
{
	WORD64		temp;

	*ExMask = (((*ExMask)&0x800000000000000)>>60)+((*ExMask)<<1);

	temp.data64 = data + (DWORDLONG)(*ExMask);

	bd.PutBits((DWORD)temp.d1, 16);
	bd.PutBits((DWORD)temp.d2, 16);
	bd.PutBits((DWORD)temp.d3, 16);
	bd.PutBits((DWORD)temp.d4, 16);
}

static DWORDLONG _xGet64(BIT_DEVICE_READ &bd, DWORDLONG *ExMask)
{
	WORD64		temp;

	*ExMask = (((*ExMask)&0x800000000000000)>>60)+((*ExMask)<<1);

	temp.d1 = (WORD)bd.GetBits(16);
	temp.d2 = (WORD)bd.GetBits(16);
	temp.d3 = (WORD)bd.GetBits(16);
	temp.d4 = (WORD)bd.GetBits(16);

	return temp.data64 - (DWORDLONG)(*ExMask);
}
